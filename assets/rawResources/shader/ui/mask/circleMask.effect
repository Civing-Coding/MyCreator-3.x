// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: circleMask-vs:vert
      frag: circleMask-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        center:      { value: [0.5, 0.5], inspector: { displayName : "中心点"     } }
        radius:      { value: 0.5,         inspector: { displayName : "半径"      } }
        feather:     { value: 0.5,         inspector: { displayName : "羽化半径"  } }
}%

CCProgram circleMask-vs %{
  precision highp float;
  #include <cc-global>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_texCoord;
    v_color = a_color;

    return pos;
  }
}%

CCProgram circleMask-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <output>

  in vec4 v_color;
  in vec2 v_uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;

  uniform props {
    vec2  center;
    float radius;
    float feather;
  };

  vec4 frag () {
    float dis = distance(v_uv0, center);
    if( dis > radius ){
        discard;
    }

    vec4 o = vec4(1, 1, 1, 1);
    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
    o *= v_color;

    if( feather > 0.0 ){
      o.a = smoothstep(radius, radius - feather, dis);
    }

    return o;
  }
}%
