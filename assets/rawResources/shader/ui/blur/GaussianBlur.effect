CCEffect %{
  techniques:
  - passes:
    - vert: gaussianBlur-vs:vert
      frag: gaussianBlur-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        size: { value: [500.0, 500.0], inspector: { displayName : "节点尺寸" } }
}%


CCProgram gaussianBlur-vs %{
  precision highp float;
  #include <cc-global>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
 
  out vec2 v_uv0;
  out vec4 v_color;
 
  vec4 vert () {

    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_texCoord;
    v_color = a_color;

    return pos;
  }
}%


CCProgram gaussianBlur-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec2 v_uv0;
  in vec4 v_color;

  #pragma builtin(local)
  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;

  uniform Properties {
    vec2 size;
  };
  
  // 模糊半径
  // for 循环的次数必须为常量
  const float RADIUS = 10.0;

  // 获取模糊颜色
  vec4 getBlurColor (vec2 pos) {
    vec4 color = vec4(0); // 初始颜色
    float sum = 0.0; // 总权重
    // 卷积过程
    for (float r = -RADIUS; r <= RADIUS; r++) { // 水平方向
      for (float c = -RADIUS; c <= RADIUS; c++) { // 垂直方向
        vec2 target = pos + vec2(r / size.x, c / size.y); // 目标像素位置
        float weight = (RADIUS - abs(r)) * (RADIUS - abs(c)); // 计算权重
        color += CCSampleWithAlphaSeparated(cc_spriteTexture, target) * weight; // 累加颜色
        sum += weight; // 累加权重
      }
    }
    color /= sum; // 求出平均值
    return color;
  }
 
  vec4 frag () {

    vec4 o = getBlurColor(v_uv0); // 获取模糊后的颜色
    o.a = v_color.a; // 还原透明度
    return o;

  }
}%