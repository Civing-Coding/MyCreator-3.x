// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: fluxay-vs:vert
      frag: fluxay-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        width:         { value: 0.1,         inspector: { displayName: "流光宽度"     }}
        strength:      { value: 2,           inspector: { displayName: "流光增亮强度" }}
        offset:        { value: 0.2,         inspector: { displayName: "流光偏移值"   }}
        speed:         { value: 0.8,         inspector: { displayName: "速度"         }}
        distancee:     { value: 1.5,         inspector: { displayName: "距离长度"     }}
}%

CCProgram fluxay-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_texCoord;
    v_color = a_color;

    return pos;
  }
}%

CCProgram fluxay-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <legacy/output>

  in vec4 v_color;
  in vec2 v_uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;

  uniform props {
    float width;
    float strength;
    float offset;
    float speed;
    float distancee;
  };

  vec4 frag () {
    vec4 o = vec4(1., 1., 1., 1.);
    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
    float k = offset;
    float time_step = -width;
    time_step += mod(cc_time.x, distancee + 0.2 * width) / speed;
    if (v_uv0.x >= -v_uv0.y * k + time_step && v_uv0.x <= -v_uv0.y * k + width + time_step ) {
      o *= strength;
    }
    return o;
  }
}%
