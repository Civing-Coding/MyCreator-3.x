// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: rotate-vs:vert
      frag: rotate-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        tex:           { value: white,      inspector: { displayName: "噪波图" }}
        speed:         { value: 2.0,        inspector: { displayName: "速度"   }}
        center:        { value: [0.5,0.5],  inspector: { displayName: "中心点" }}
}%

CCProgram rotate-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_texCoord;
    v_color = a_color;

    return pos;
  }
}%

CCProgram rotate-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <legacy/output>

  in vec4 v_color;
  in vec2 v_uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  uniform sampler2D tex;
  uniform props {
    vec2  center;
    float speed;
  };

  vec2 rotate (vec2 UV, vec2 Center, float Radians) {
	    UV -= Center;
	    float s = sin(Radians);
	    float c = cos(Radians);
	    mat2 rMatrix = mat2(c, -s, s, c);
	    rMatrix *= 0.5;
	    rMatrix += 0.5;
	    rMatrix = rMatrix * 2.0 - 1.0;
	    UV.xy *= rMatrix;
	    UV += Center;
	    return UV;
	}

  vec4 frag () {
    vec4 o = vec4(1,1,1,1);
    vec2 uv1 = rotate(v_uv0, center, cc_time.x * speed);
    o *=  CCSampleWithAlphaSeparated(cc_spriteTexture, uv1);
    vec4 color_tex = CCSampleWithAlphaSeparated(tex, v_uv0);
    o.a *= color_tex.a;
    return o;
  }
}%
