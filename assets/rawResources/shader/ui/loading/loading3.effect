// https://www.shadertoy.com/view/fdSBDD

CCEffect %{
techniques:
  - name: opaque
    passes:
      - vert: loading3-vs:vert # builtin header
        frag: loading3-fs:frag
        blendState:
          targets:
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendSrcAlpha: src_alpha
              blendDstAlpha: one_minus_src_alpha
        properties:
          speed: { value: 5.0, editor: { type: float } }
          luminance: { value: 6.0, editor: { type: float } }
          color: { value: [1.0, 0.0, 0.5, 1.0], editor: { type: color } }

}%

CCProgram loading3-vs %{
precision highp float;
#include <builtin/uniforms/cc-global>

in vec3 a_position;
in vec2 a_texCoord;
in vec4 a_color;

out vec4 v_color;
out vec2 v_uv;

vec4 vert() {
  vec4 pos = vec4(a_position, 1);
  pos = cc_matViewProj * pos;
  v_uv = a_texCoord;
  v_color = a_color;
  return pos;
}
}%

CCProgram loading3-fs %{
precision highp float;
#include <legacy/output>

in vec2 v_uv;
in vec3 v_color;

uniform Constant {
  vec4 color;
  float speed;
  float luminance;
};

#define pi 3.1415

float circle(vec2 uv, float blur) {
  return smoothstep(0.0, blur, 1.0 - length(uv));
}

vec4 frag() {
  vec2 uv = vec2(v_uv.x - 0.5, - v_uv.y + 0.5);
  float circleWhite = circle(uv * 2.45, 1.0);
  float circleBlack = circle(uv * 2.86, 0.7);
  float c = circleWhite - circleBlack;
  c *= luminance;
  
  float t = cc_time.x * speed;
  c -= circle(vec2(uv.x - sin(t) * 0.85, 1.8 * uv.y - cos(t) * 0.65) * 0.8, 1.0);
  
  vec3 col = vec3(c) * color.rgb;
  col += vec3(smoothstep(0.2, 0.7, c)) * vec3(1.0, 1.0, 0.0);
  col += vec3(smoothstep(0.4, 0.55, c));
  
  return CCFragOutput(vec4(col, 1.0));
}
}%
